syntax = "proto3";

option java_generic_services = true;
option java_multiple_files = true;
option java_package = "org.catmq.protocol.definition";
option java_generate_equals_and_hash = true;
option java_string_check_utf8 = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// 消息权限
enum Permission {
  PERMISSION_UNSPECIFIED = 0;
  NONE = 1;
  READ = 2;
  WRITE = 3;
  READ_WRITE = 4;
}

// 进程模式：同步or异步
enum ProcessMode {
  SYNC = 0;
  ASYNC = 1;
}

// 压缩方式
enum Encoding {
  ENCODING_UNSPECIFIED = 0;

  IDENTITY = 1;

  GZIP = 2;

  LZ4 = 3;

  ZSTD = 4;

  SNAPPY = 5;
}


enum ChecksumType {
  DIGEST_TYPE_UNSPECIFIED = 0;

  // CRC algorithm achieves goal of detecting random data error with lowest computation overhead.
  // CRC算法以最小的计算量达到了检测随机数据错误的目的。计算开销
  CRC32 = 1;

  // MD5 algorithm achieves good balance between collision rate and computation overhead.
  // MD5算法在碰撞率和计算开销之间达到了很好的平衡
  MD5 = 2;

  // SHA-family has substantially fewer collision with fair amount of computation.
  // 在相当大的计算量下，sha家族的碰撞要少得多。
  SHA1 = 3;
}

// When publishing messages to or subscribing messages from brokers, clients
// shall include or validate digests of message body to ensure data integrity.
//
// For message publishing, when an invalid digest were detected, brokers need
// respond client with BAD_REQUEST.
//
// For messages subscription, when an invalid digest were detected, consumers
// need to handle this case according to message type:
// 1) Standard messages should be negatively acknowledged instantly, causing
// immediate re-delivery; 2) FIFO messages require special RPC, to re-fetch
// previously acquired messages batch;

// 当向broker发布消息或从broker订阅消息时，客户端必须包含或验证消息体摘要，以确保数据的完整性。
// 对于消息发布，当检测到无效摘要时，代理需要用BAD_REQUEST响应客户机。
// 对于消息订阅，当检测到无效摘要时，消费者需要根据消息类型进行处理:
//  1)标准消息应立即被否定确认，导致立即重发;
//  2)FIFO消息需要特殊的RPC，重新获取先前获得的消息批处理;

message Checksum {
  ChecksumType type = 1;
  string body = 2;
}

// 系统文件 --> 每一位置上都是些啥
message SystemProperties {
  // Tag, which is optional.
  // 可选择的tag，在SystemProperties类消息中标识为1
  optional string tag = 1;

  // Message keys
  // 可重复的keys，标识SystemProperties消息中的数据
  repeated string keys = 2;

  // Message identifier, client-side generated, remains unique.
  // if message_id is empty, the send message request will be aborted with status `INVALID_ARGUMENT`
  // 客户端生成的消息标识符保持唯一。如果message_id为空，则发送消息请求将以状态' INVALID_ARGUMENT终止

  string message_id = 3;

  // Message body digest
  Checksum body_digest = 4;

  // Message body encoding. Candidate options are identity, gzip, snappy etc.
  Encoding body_encoding = 5;


  // Message born time-point.
  google.protobuf.Timestamp born_timestamp = 7;

  // Message born host. Valid options are IPv4, IPv6 or client host domain name.
  string born_host = 8;

  // Time-point at which the message is stored in the broker, which is absent
  // for message publishing.
  optional google.protobuf.Timestamp store_timestamp = 9;

  // The broker that stores this message. It may be broker name, IP or arbitrary
  // identifier that uniquely identify the server.
  string store_host = 10;

  // Time-point at which broker delivers to clients, which is optional.
  optional google.protobuf.Timestamp delivery_timestamp = 11;

  // If a message is acquired by way of POP, this field holds the receipt,
  // which is absent for message publishing.
  // Clients use the receipt to acknowledge or negatively acknowledge the
  // message.
  optional string receipt_handle = 12;

  // Message queue identifier in which a message is physically stored.
  int32 queue_id = 13;

  // Message-queue offset at which a message is stored, which is absent for
  // message publishing.
  optional int64 queue_offset = 14;

  // Period of time servers would remain invisible once a message is acquired.
  optional google.protobuf.Duration invisible_duration = 15;

  // Business code may failed to process messages for the moment. Hence, clients
  // may request servers to deliver them again using certain back-off strategy,
  // the attempt is 1 not 0 if message is delivered first time, and it is absent
  // for message publishing.
  optional int32 delivery_attempt = 16;

  // Define the group name of message in the same topic, which is optional.
  optional string message_group = 17;

  // Trace context for each message, which is optional.
  optional string trace_context = 18;

  // If a transactional message stay unresolved for more than
  // `transaction_orphan_threshold`, it would be regarded as an
  // orphan. Servers that manages orphan messages would pick up
  // a capable publisher to resolve
  optional google.protobuf.Duration orphaned_transaction_recovery_duration = 19;
}

// 键值对消息
message KvPair {
  string key = 1;
  string value = 2;
}

// 枚举类(常量类)，各种状态码
enum Code {
  CODE_UNSPECIFIED = 0;

  // Generic code for success.
  OK = 20000;

  // Generic code for multiple return results.
  MULTIPLE_RESULTS = 30000;

  // Generic code for bad request, indicating that required fields or headers are missing.
  BAD_REQUEST = 40000;
  // Format of access point is illegal.
  ILLEGAL_ACCESS_POINT = 40001;
  // Format of topic is illegal.
  ILLEGAL_TOPIC = 40002;
  // Format of consumer group is illegal.
  ILLEGAL_CONSUMER_GROUP = 40003;
  // Format of message tag is illegal.
  ILLEGAL_MESSAGE_TAG = 40004;
  // Format of message key is illegal.
  ILLEGAL_MESSAGE_KEY = 40005;
  // Format of message group is illegal.
  ILLEGAL_MESSAGE_GROUP = 40006;
  // Format of message property key is illegal.
  ILLEGAL_MESSAGE_PROPERTY_KEY = 40007;
  // Transaction id is invalid.
  INVALID_TRANSACTION_ID = 40008;
  // Format of message id is illegal.
  ILLEGAL_MESSAGE_ID = 40009;
  // Format of filter expression is illegal.
  ILLEGAL_FILTER_EXPRESSION = 40010;
  // The invisible time of request is invalid.
  ILLEGAL_INVISIBLE_TIME = 40011;
  // The delivery timestamp of message is invalid.
  ILLEGAL_DELIVERY_TIME = 40012;
  // Receipt handle of message is invalid.
  INVALID_RECEIPT_HANDLE = 40013;
  // Message property conflicts with its type.
  MESSAGE_PROPERTY_CONFLICT_WITH_TYPE = 40014;
  // Client type could not be recognized.
  UNRECOGNIZED_CLIENT_TYPE = 40015;
  // Message is corrupted.
  MESSAGE_CORRUPTED = 40016;
  // Request is rejected due to missing of x-mq-client-id header.
  CLIENT_ID_REQUIRED = 40017;

  // Generic code indicates that the client request lacks valid authentication
  // credentials for the requested resource.
  UNAUTHORIZED = 40100;

  // Generic code indicates that the account is suspended due to overdue of payment.
  PAYMENT_REQUIRED = 40200;

  // Generic code for the case that user does not have the permission to operate.
  FORBIDDEN = 40300;

  // Generic code for resource not found.
  NOT_FOUND = 40400;
  // Message not found from server.
  MESSAGE_NOT_FOUND = 40401;
  // Topic resource does not exist.
  TOPIC_NOT_FOUND = 40402;
  // Consumer group resource does not exist.
  CONSUMER_GROUP_NOT_FOUND = 40403;

  // Generic code representing client side timeout when connecting to, reading data from, or write data to server.
  REQUEST_TIMEOUT = 40800;

  // Generic code represents that the request entity is larger than limits defined by server.
  PAYLOAD_TOO_LARGE = 41300;
  // Message body size exceeds the threshold.
  MESSAGE_BODY_TOO_LARGE = 41301;

  // Generic code for use cases where pre-conditions are not met.
  // For example, if a producer instance is used to publish messages without prior start() invocation,
  // this error code will be raised.
  PRECONDITION_FAILED = 42800;

  // Generic code indicates that too many requests are made in short period of duration.
  // Requests are throttled.
  TOO_MANY_REQUESTS = 42900;

  // Generic code for the case that the server is unwilling to process the request because its header fields are too large.
  // The request may be resubmitted after reducing the size of the request header fields.
  REQUEST_HEADER_FIELDS_TOO_LARGE = 43100;
  // Message properties total size exceeds the threshold.
  MESSAGE_PROPERTIES_TOO_LARGE = 43101;

  // Generic code indicates that server/client encountered an unexpected
  // condition that prevented it from fulfilling the request.
  INTERNAL_ERROR = 50000;
  // Code indicates that the server encountered an unexpected condition
  // that prevented it from fulfilling the request.
  // This error response is a generic "catch-all" response.
  // Usually, this indicates the server cannot find a better alternative
  // error code to response. Sometimes, server administrators log error
  // responses like the 500 status code with more details about the request
  // to prevent the error from happening again in the future.
  //
  // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500
  INTERNAL_SERVER_ERROR = 50001;
  // The HA-mechanism is not working now.
  HA_NOT_AVAILABLE = 50002;

  // Generic code means that the server or client does not support the
  // functionality required to fulfill the request.
  NOT_IMPLEMENTED = 50100;

  // Generic code represents that the server, which acts as a gateway or proxy,
  // does not get an satisfied response in time from its upstream servers.
  // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504
  PROXY_TIMEOUT = 50400;
  // Message persistence timeout.
  MASTER_PERSISTENCE_TIMEOUT = 50401;
  // Slave persistence timeout.
  SLAVE_PERSISTENCE_TIMEOUT = 50402;

  // Generic code for unsupported operation.
  UNSUPPORTED = 50500;
  // Operation is not allowed in current version.
  VERSION_UNSUPPORTED = 50501;
  // Not allowed to verify message. Chances are that you are verifying
  // a FIFO message, as is violating FIFO semantics.
  VERIFY_FIFO_MESSAGE_UNSUPPORTED = 50502;

  // Generic code for failed message consumption.
  FAILED_TO_CONSUME_MESSAGE = 60000;
}

// 状态码
message Status {
  Code code = 1;
  string message = 2;
}

// 原始消息
message OriginMessage{
  // 过期时间
  int64 expireTime = 1;
  // 消息体(二进制比特流) --> bytes：可能包含任意顺序的字节数据
  bytes body = 2;
}

// 编号消息
message NumberedMessage{
  // 分段标识
  int64 segmentId = 1;
  // (这条消息要被发往哪里)的标识
  int64 entryId = 2;
  bytes body = 3;
}